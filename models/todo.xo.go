package models

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
)

// Todo represents a row from 'todos'.
type Todo struct {
	ID         string         `json:"id"`          // id
	Content    string         `json:"content"`     // content
	Done       bool           `json:"done"`        // done
	CategoryID sql.NullString `json:"category_id"` // category_id
	CreatedAt  uint           `json:"created_at"`  // created_at
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the [Todo] exists in the database.
func (t *Todo) Exists() bool {
	return t._exists
}

// Deleted returns true when the [Todo] has been marked for deletion
// from the database.
func (t *Todo) Deleted() bool {
	return t._deleted
}

// Insert inserts the [Todo] to the database.
func (t *Todo) Insert(ctx context.Context, db DB) error {
	switch {
	case t._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case t._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (manual)
	const sqlstr = `INSERT INTO todos (` +
		`id, content, done, category_id, created_at` +
		`) VALUES (` +
		`?, ?, ?, ?, ?` +
		`)`
	// run
	logf(sqlstr, t.ID, t.Content, t.Done, t.CategoryID, t.CreatedAt)
	if _, err := db.ExecContext(ctx, sqlstr, t.ID, t.Content, t.Done, t.CategoryID, t.CreatedAt); err != nil {
		return logerror(err)
	}
	// set exists
	t._exists = true
	return nil
}

// Update updates a [Todo] in the database.
func (t *Todo) Update(ctx context.Context, db DB) error {
	switch {
	case !t._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case t._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with primary key
	const sqlstr = `UPDATE todos SET ` +
		`content = ?, done = ?, category_id = ?, created_at = ? ` +
		`WHERE id = ?`
	// run
	logf(sqlstr, t.Content, t.Done, t.CategoryID, t.CreatedAt, t.ID)
	if _, err := db.ExecContext(ctx, sqlstr, t.Content, t.Done, t.CategoryID, t.CreatedAt, t.ID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the [Todo] to the database.
func (t *Todo) Save(ctx context.Context, db DB) error {
	if t.Exists() {
		return t.Update(ctx, db)
	}
	return t.Insert(ctx, db)
}

// Upsert performs an upsert for [Todo].
func (t *Todo) Upsert(ctx context.Context, db DB) error {
	switch {
	case t._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO todos (` +
		`id, content, done, category_id, created_at` +
		`) VALUES (` +
		`?, ?, ?, ?, ?` +
		`)` +
		` ON DUPLICATE KEY UPDATE ` +
		`id = VALUES(id), content = VALUES(content), done = VALUES(done), category_id = VALUES(category_id), created_at = VALUES(created_at)`
	// run
	logf(sqlstr, t.ID, t.Content, t.Done, t.CategoryID, t.CreatedAt)
	if _, err := db.ExecContext(ctx, sqlstr, t.ID, t.Content, t.Done, t.CategoryID, t.CreatedAt); err != nil {
		return logerror(err)
	}
	// set exists
	t._exists = true
	return nil
}

// Delete deletes the [Todo] from the database.
func (t *Todo) Delete(ctx context.Context, db DB) error {
	switch {
	case !t._exists: // doesn't exist
		return nil
	case t._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM todos ` +
		`WHERE id = ?`
	// run
	logf(sqlstr, t.ID)
	if _, err := db.ExecContext(ctx, sqlstr, t.ID); err != nil {
		return logerror(err)
	}
	// set deleted
	t._deleted = true
	return nil
}

// TodoByID retrieves a row from 'todos' as a [Todo].
//
// Generated from index 'todos_id_pkey'.
func TodoByID(ctx context.Context, db DB, id string) (*Todo, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, content, done, category_id, created_at ` +
		`FROM todos ` +
		`WHERE id = ?`
	// run
	logf(sqlstr, id)
	t := Todo{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, id).Scan(&t.ID, &t.Content, &t.Done, &t.CategoryID, &t.CreatedAt); err != nil {
		return nil, logerror(err)
	}
	return &t, nil
}

func AllTodos(ctx context.Context, db DB) ([]*Todo, error) {
	const sqlstr = `SELECT ` +
		`id, content, done, category_id, created_at ` +
		`FROM todos `
	// run
	logf(sqlstr)
	rows, err := db.QueryContext(ctx, sqlstr)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*Todo
	for rows.Next() {
		t := Todo{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&t.ID, &t.Content, &t.Done, &t.CategoryID, &t.CreatedAt); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &t)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}
