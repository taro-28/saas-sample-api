// Code generated by github.com/Yamashou/gqlgenc, DO NOT EDIT.

package e2etest

import (
	"context"
	"net/http"

	"github.com/Yamashou/gqlgenc/client"
	gql "github.com/taro-28/saas-sample-api/gql/model"
)

type Client struct {
	Client *client.Client
}

func NewClient(cli *http.Client, baseURL string, options ...client.HTTPRequestOption) *Client {
	return &Client{Client: client.NewClient(cli, baseURL, options...)}
}

type Query struct {
	Categories []*gql.Category "json:\"categories\" graphql:\"categories\""
	Todos      []*gql.Todo     "json:\"todos\" graphql:\"todos\""
}
type Mutation struct {
	CreateCategory gql.Category "json:\"createCategory\" graphql:\"createCategory\""
	UpdateCategory gql.Category "json:\"updateCategory\" graphql:\"updateCategory\""
	DeleteCategory string       "json:\"deleteCategory\" graphql:\"deleteCategory\""
	CreateTodo     gql.Todo     "json:\"createTodo\" graphql:\"createTodo\""
	UpdateTodo     gql.Todo     "json:\"updateTodo\" graphql:\"updateTodo\""
	UpdateTodoDone gql.Todo     "json:\"updateTodoDone\" graphql:\"updateTodoDone\""
	DeleteTodo     string       "json:\"deleteTodo\" graphql:\"deleteTodo\""
}
type CategoryFragment struct {
	ID        string "json:\"id\" graphql:\"id\""
	Name      string "json:\"name\" graphql:\"name\""
	CreatedAt int    "json:\"createdAt\" graphql:\"createdAt\""
}
type TodoFragment struct {
	ID        string            "json:\"id\" graphql:\"id\""
	Content   string            "json:\"content\" graphql:\"content\""
	Done      bool              "json:\"done\" graphql:\"done\""
	CreatedAt int               "json:\"createdAt\" graphql:\"createdAt\""
	Category  *CategoryFragment "json:\"category\" graphql:\"category\""
}
type Categories struct {
	Categories []*CategoryFragment "json:\"categories\" graphql:\"categories\""
}
type CreateCategory struct {
	CreateCategory CategoryFragment "json:\"createCategory\" graphql:\"createCategory\""
}
type CreateTodo struct {
	CreateTodo TodoFragment "json:\"createTodo\" graphql:\"createTodo\""
}
type DeleteCategory struct {
	DeleteCategory string "json:\"deleteCategory\" graphql:\"deleteCategory\""
}
type DeleteTodo struct {
	DeleteTodo string "json:\"deleteTodo\" graphql:\"deleteTodo\""
}
type Todos struct {
	Todos []*TodoFragment "json:\"todos\" graphql:\"todos\""
}
type UpdateCategory struct {
	UpdateCategory CategoryFragment "json:\"updateCategory\" graphql:\"updateCategory\""
}
type UpdateTodo struct {
	UpdateTodo TodoFragment "json:\"updateTodo\" graphql:\"updateTodo\""
}
type UpdateTodoDone struct {
	UpdateTodoDone TodoFragment "json:\"updateTodoDone\" graphql:\"updateTodoDone\""
}

const CategoriesDocument = `query Categories {
	categories {
		... CategoryFragment
	}
}
fragment CategoryFragment on Category {
	id
	name
	createdAt
}
`

func (c *Client) Categories(ctx context.Context, httpRequestOptions ...client.HTTPRequestOption) (*Categories, error) {
	vars := map[string]interface{}{}

	var res Categories
	if err := c.Client.Post(ctx, "Categories", CategoriesDocument, &res, vars, httpRequestOptions...); err != nil {
		return nil, err
	}

	return &res, nil
}

const CreateCategoryDocument = `mutation CreateCategory ($input: CreateCategoryInput!) {
	createCategory(input: $input) {
		... CategoryFragment
	}
}
fragment CategoryFragment on Category {
	id
	name
	createdAt
}
`

func (c *Client) CreateCategory(ctx context.Context, input gql.CreateCategoryInput, httpRequestOptions ...client.HTTPRequestOption) (*CreateCategory, error) {
	vars := map[string]interface{}{
		"input": input,
	}

	var res CreateCategory
	if err := c.Client.Post(ctx, "CreateCategory", CreateCategoryDocument, &res, vars, httpRequestOptions...); err != nil {
		return nil, err
	}

	return &res, nil
}

const CreateTodoDocument = `mutation CreateTodo ($input: CreateTodoInput!) {
	createTodo(input: $input) {
		... TodoFragment
	}
}
fragment CategoryFragment on Category {
	id
	name
	createdAt
}
fragment TodoFragment on Todo {
	id
	content
	done
	createdAt
	category {
		... CategoryFragment
	}
}
`

func (c *Client) CreateTodo(ctx context.Context, input gql.CreateTodoInput, httpRequestOptions ...client.HTTPRequestOption) (*CreateTodo, error) {
	vars := map[string]interface{}{
		"input": input,
	}

	var res CreateTodo
	if err := c.Client.Post(ctx, "CreateTodo", CreateTodoDocument, &res, vars, httpRequestOptions...); err != nil {
		return nil, err
	}

	return &res, nil
}

const DeleteCategoryDocument = `mutation DeleteCategory ($id: ID!) {
	deleteCategory(id: $id)
}
`

func (c *Client) DeleteCategory(ctx context.Context, id string, httpRequestOptions ...client.HTTPRequestOption) (*DeleteCategory, error) {
	vars := map[string]interface{}{
		"id": id,
	}

	var res DeleteCategory
	if err := c.Client.Post(ctx, "DeleteCategory", DeleteCategoryDocument, &res, vars, httpRequestOptions...); err != nil {
		return nil, err
	}

	return &res, nil
}

const DeleteTodoDocument = `mutation DeleteTodo ($id: ID!) {
	deleteTodo(id: $id)
}
`

func (c *Client) DeleteTodo(ctx context.Context, id string, httpRequestOptions ...client.HTTPRequestOption) (*DeleteTodo, error) {
	vars := map[string]interface{}{
		"id": id,
	}

	var res DeleteTodo
	if err := c.Client.Post(ctx, "DeleteTodo", DeleteTodoDocument, &res, vars, httpRequestOptions...); err != nil {
		return nil, err
	}

	return &res, nil
}

const TodosDocument = `query Todos {
	todos {
		... TodoFragment
	}
}
fragment CategoryFragment on Category {
	id
	name
	createdAt
}
fragment TodoFragment on Todo {
	id
	content
	done
	createdAt
	category {
		... CategoryFragment
	}
}
`

func (c *Client) Todos(ctx context.Context, httpRequestOptions ...client.HTTPRequestOption) (*Todos, error) {
	vars := map[string]interface{}{}

	var res Todos
	if err := c.Client.Post(ctx, "Todos", TodosDocument, &res, vars, httpRequestOptions...); err != nil {
		return nil, err
	}

	return &res, nil
}

const UpdateCategoryDocument = `mutation UpdateCategory ($input: UpdateCategoryInput!) {
	updateCategory(input: $input) {
		... CategoryFragment
	}
}
fragment CategoryFragment on Category {
	id
	name
	createdAt
}
`

func (c *Client) UpdateCategory(ctx context.Context, input gql.UpdateCategoryInput, httpRequestOptions ...client.HTTPRequestOption) (*UpdateCategory, error) {
	vars := map[string]interface{}{
		"input": input,
	}

	var res UpdateCategory
	if err := c.Client.Post(ctx, "UpdateCategory", UpdateCategoryDocument, &res, vars, httpRequestOptions...); err != nil {
		return nil, err
	}

	return &res, nil
}

const UpdateTodoDocument = `mutation UpdateTodo ($input: UpdateTodoInput!) {
	updateTodo(input: $input) {
		... TodoFragment
	}
}
fragment CategoryFragment on Category {
	id
	name
	createdAt
}
fragment TodoFragment on Todo {
	id
	content
	done
	createdAt
	category {
		... CategoryFragment
	}
}
`

func (c *Client) UpdateTodo(ctx context.Context, input gql.UpdateTodoInput, httpRequestOptions ...client.HTTPRequestOption) (*UpdateTodo, error) {
	vars := map[string]interface{}{
		"input": input,
	}

	var res UpdateTodo
	if err := c.Client.Post(ctx, "UpdateTodo", UpdateTodoDocument, &res, vars, httpRequestOptions...); err != nil {
		return nil, err
	}

	return &res, nil
}

const UpdateTodoDoneDocument = `mutation UpdateTodoDone ($input: UpdateTodoDoneInput!) {
	updateTodoDone(input: $input) {
		... TodoFragment
	}
}
fragment CategoryFragment on Category {
	id
	name
	createdAt
}
fragment TodoFragment on Todo {
	id
	content
	done
	createdAt
	category {
		... CategoryFragment
	}
}
`

func (c *Client) UpdateTodoDone(ctx context.Context, input gql.UpdateTodoDoneInput, httpRequestOptions ...client.HTTPRequestOption) (*UpdateTodoDone, error) {
	vars := map[string]interface{}{
		"input": input,
	}

	var res UpdateTodoDone
	if err := c.Client.Post(ctx, "UpdateTodoDone", UpdateTodoDoneDocument, &res, vars, httpRequestOptions...); err != nil {
		return nil, err
	}

	return &res, nil
}
