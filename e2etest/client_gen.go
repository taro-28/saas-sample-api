// Code generated by github.com/Yamashou/gqlgenc, DO NOT EDIT.

package e2etest

import (
	"context"
	"net/http"

	"github.com/Yamashou/gqlgenc/client"
	gql "github.com/taro-28/saas-sample-api/gql/model"
)

type Client struct {
	Client *client.Client
}

func NewClient(cli *http.Client, baseURL string, options ...client.HTTPRequestOption) *Client {
	return &Client{Client: client.NewClient(cli, baseURL, options...)}
}

type Query struct {
	Categories []*gql.Category "json:\"categories\" graphql:\"categories\""
	Todos      []*gql.Todo     "json:\"todos\" graphql:\"todos\""
}
type Mutation struct {
	CreateCategory gql.Category "json:\"createCategory\" graphql:\"createCategory\""
	UpdateCategory gql.Category "json:\"updateCategory\" graphql:\"updateCategory\""
	DeleteCategory string       "json:\"deleteCategory\" graphql:\"deleteCategory\""
	CreateTodo     gql.Todo     "json:\"createTodo\" graphql:\"createTodo\""
	UpdateTodo     gql.Todo     "json:\"updateTodo\" graphql:\"updateTodo\""
	DeleteTodo     string       "json:\"deleteTodo\" graphql:\"deleteTodo\""
}
type TodoFragment struct {
	ID        string "json:\"id\" graphql:\"id\""
	Content   string "json:\"content\" graphql:\"content\""
	Done      bool   "json:\"done\" graphql:\"done\""
	CreatedAt int    "json:\"createdAt\" graphql:\"createdAt\""
}
type CompleteTodo struct {
	UpdateTodo TodoFragment "json:\"updateTodo\" graphql:\"updateTodo\""
}
type CreateTodo struct {
	CreateTodo TodoFragment "json:\"createTodo\" graphql:\"createTodo\""
}
type DeleteTodo struct {
	DeleteTodo string "json:\"deleteTodo\" graphql:\"deleteTodo\""
}
type TodoTest struct {
	Todos []*TodoFragment "json:\"todos\" graphql:\"todos\""
}
type UpdateTodoContent struct {
	UpdateTodo TodoFragment "json:\"updateTodo\" graphql:\"updateTodo\""
}

const CompleteTodoDocument = `mutation CompleteTodo ($id: ID!) {
	updateTodo(input: {id:$id,done:true}) {
		... TodoFragment
	}
}
fragment TodoFragment on Todo {
	id
	content
	done
	createdAt
}
`

func (c *Client) CompleteTodo(ctx context.Context, id string, httpRequestOptions ...client.HTTPRequestOption) (*CompleteTodo, error) {
	vars := map[string]interface{}{
		"id": id,
	}

	var res CompleteTodo
	if err := c.Client.Post(ctx, "CompleteTodo", CompleteTodoDocument, &res, vars, httpRequestOptions...); err != nil {
		return nil, err
	}

	return &res, nil
}

const CreateTodoDocument = `mutation CreateTodo ($content: String!) {
	createTodo(input: {content:$content}) {
		... TodoFragment
	}
}
fragment TodoFragment on Todo {
	id
	content
	done
	createdAt
}
`

func (c *Client) CreateTodo(ctx context.Context, content string, httpRequestOptions ...client.HTTPRequestOption) (*CreateTodo, error) {
	vars := map[string]interface{}{
		"content": content,
	}

	var res CreateTodo
	if err := c.Client.Post(ctx, "CreateTodo", CreateTodoDocument, &res, vars, httpRequestOptions...); err != nil {
		return nil, err
	}

	return &res, nil
}

const DeleteTodoDocument = `mutation DeleteTodo ($id: ID!) {
	deleteTodo(id: $id)
}
`

func (c *Client) DeleteTodo(ctx context.Context, id string, httpRequestOptions ...client.HTTPRequestOption) (*DeleteTodo, error) {
	vars := map[string]interface{}{
		"id": id,
	}

	var res DeleteTodo
	if err := c.Client.Post(ctx, "DeleteTodo", DeleteTodoDocument, &res, vars, httpRequestOptions...); err != nil {
		return nil, err
	}

	return &res, nil
}

const TodoTestDocument = `query TodoTest {
	todos {
		... TodoFragment
	}
}
fragment TodoFragment on Todo {
	id
	content
	done
	createdAt
}
`

func (c *Client) TodoTest(ctx context.Context, httpRequestOptions ...client.HTTPRequestOption) (*TodoTest, error) {
	vars := map[string]interface{}{}

	var res TodoTest
	if err := c.Client.Post(ctx, "TodoTest", TodoTestDocument, &res, vars, httpRequestOptions...); err != nil {
		return nil, err
	}

	return &res, nil
}

const UpdateTodoContentDocument = `mutation UpdateTodoContent ($id: ID!, $content: String!) {
	updateTodo(input: {id:$id,content:$content}) {
		... TodoFragment
	}
}
fragment TodoFragment on Todo {
	id
	content
	done
	createdAt
}
`

func (c *Client) UpdateTodoContent(ctx context.Context, id string, content string, httpRequestOptions ...client.HTTPRequestOption) (*UpdateTodoContent, error) {
	vars := map[string]interface{}{
		"id":      id,
		"content": content,
	}

	var res UpdateTodoContent
	if err := c.Client.Post(ctx, "UpdateTodoContent", UpdateTodoContentDocument, &res, vars, httpRequestOptions...); err != nil {
		return nil, err
	}

	return &res, nil
}
