package gql

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.41

import (
	"context"
	"fmt"
	"log"
	"time"

	"github.com/rs/xid"
	gql "github.com/taro-28/saas-sample-api/gql/model"
	"github.com/taro-28/saas-sample-api/models"
)

// CreateTodo is the resolver for the createTodo field.
func (r *mutationResolver) CreateTodo(ctx context.Context, input gql.CreateTodoInput) (*gql.Todo, error) {
	todo := &models.Todo{
		ID:        xid.New().String(),
		Content:   input.Content,
		Done:      false,
		CreatedAt: uint(time.Now().Unix()),
	}

	if err := todo.Insert(ctx, r.DB); err != nil {
		log.Fatalf("failed to insert: %v", err)
	}

	return &gql.Todo{
		ID:        todo.ID,
		Content:   todo.Content,
		Done:      todo.Done,
		CreatedAt: int(todo.CreatedAt),
	}, nil
}

// UpdateTodo is the resolver for the updateTodo field.
func (r *mutationResolver) UpdateTodo(ctx context.Context, input gql.UpdateTodoInput) (*gql.Todo, error) {
	todo, err := models.TodoByID(ctx, r.DB, input.ID)
	if err != nil {
		log.Fatalf("failed to get todo by id: %v", err)
	}

	if input.Content != nil {
		todo.Content = *input.Content
	}
	if input.Done != nil {
		todo.Done = *input.Done
	}

	if err := todo.Update(ctx, r.DB); err != nil {
		log.Fatalf("failed to update todo: %v", err)
	}

	return &gql.Todo{
		ID:        todo.ID,
		Content:   todo.Content,
		Done:      todo.Done,
		CreatedAt: int(todo.CreatedAt),
	}, nil
}

// DeleteTodo is the resolver for the deleteTodo field.
func (r *mutationResolver) DeleteTodo(ctx context.Context, id string) (string, error) {
	todo, err := models.TodoByID(ctx, r.DB, id)
	if err != nil {
		log.Fatalf("failed to get todo by id: %v", err)
	}

	err = todo.Delete(ctx, r.DB)
	if err != nil {
		log.Fatalf("failed to delete todo: %v", err)
	}

	return id, nil
}

// Todos is the resolver for the todos field.
func (r *queryResolver) Todos(ctx context.Context) ([]*gql.Todo, error) {
	todos, err := models.AllTodos(ctx, r.DB)
	if err != nil {
		log.Fatalf("failed to get all todos: %v", err)
	}

	var gqlTodos []*gql.Todo
	for _, todo := range todos {
		gqlTodos = append(gqlTodos, &gql.Todo{
			ID:        todo.ID,
			Content:   todo.Content,
			Done:      todo.Done,
			CreatedAt: int(todo.CreatedAt),
		})
	}

	return gqlTodos, nil
}

// Category is the resolver for the category field.
func (r *todoResolver) Category(ctx context.Context, obj *gql.Todo) (*gql.Category, error) {
	panic(fmt.Errorf("not implemented: Category - category"))
}

// Todo returns TodoResolver implementation.
func (r *Resolver) Todo() TodoResolver { return &todoResolver{r} }

type todoResolver struct{ *Resolver }
